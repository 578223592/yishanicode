import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as l,c as a,a as t,b as e,d as p,w as s,e as r}from"./app-3gkKKKro.js";const c="/assets/image-0UY7l8LN.png",d={},h={class:"hint-container tip"},m=t("p",{class:"hint-container-title"},"友情提示",-1),B=t("li",null,[t("strong",null,"内容建设："),e(" 内容正在不断的完善中，如果对内容有疑问或者希望添加内容，请留言，欢迎提出建议。")],-1),g=t("strong",null,"转载说明：",-1),u=r('<h2 id="如果要建立联合索引-字段的顺序有什么需要注意吗" tabindex="-1"><a class="header-anchor" href="#如果要建立联合索引-字段的顺序有什么需要注意吗"><span>如果要建立联合索引，字段的顺序有什么需要注意吗</span></a></h2><p><strong>回答要点：</strong></p><ul><li>最左匹配原则</li><li>区分度高的字段放在前面</li></ul><p><strong>具体：</strong></p><p><strong>最左匹配原则：</strong> 联合索引遵循最左匹配原则，即在查询时，只有按照索引字段的顺序从最左边开始连续使用索引字段，索引才会被使用。因此，根据最常用作查询条件的字段放在联合索引的最左边，可以提高索引的利用率。</p><p><strong>区分度高的字段放在前面：</strong> 将区分度高的字段放在联合索引的前面，可以减少索引的扫描范围，提高查询效率。</p><div class="hint-container tip"><p class="hint-container-title">拓展</p><ol><li>常见的误区：最左匹配原则匹配的是索引字段的顺序，而与SQL语句中使用联合索引的顺序无关。举个例子：如果联合索引是a、b、c字段，那么如果SQL语句是<code>select * from table where a=1 and b=2 and c=3</code>和<code>select * from table where c=3 and b=2 and a=1</code>是一样的。</li></ol></div><h2 id="怎么确定语句是否走了索引" tabindex="-1"><a class="header-anchor" href="#怎么确定语句是否走了索引"><span>怎么确定语句是否走了索引？</span></a></h2><p><strong>回答要点：</strong></p><ul><li>explain命令查看执行计划，关注key（实际使用到的索引）字段。</li></ul><p><strong>具体：</strong></p><p>可以通过 explian查看执行计划来确认。</p><p>对于执行计划，参数有：</p><p><code>possible_keys</code> 字段表示可能用到的索引；</p><p><code>key</code> 字段表示实际用的索引，如果这一项为 NULL，说明没有使用索引；</p><p><code>key_len</code> 表示索引的长度；</p><p><code>rows</code> 表示扫描的数据行数。</p><p><code>type</code> 表示数据扫描类型，我们需要重点看这个。</p><p>如果 <code>typy=all</code>，代表没有走索引，进行了全表扫描。如果 key 不为 null，说明用到了索引。</p><div class="hint-container tip"><p class="hint-container-title">拓展</p><p>相关问题：</p><ol><li>有一个命令特别慢，如何排查？ 一般从：explian查看执行计划分析；慢日志查询分析 两个角度出发</li></ol></div><h2 id="一般是建立哪些字段的索引呢" tabindex="-1"><a class="header-anchor" href="#一般是建立哪些字段的索引呢"><span>一般是建立哪些字段的索引呢</span></a></h2><p><strong>回答要点：</strong></p><ul><li><code>WHERE</code> 查询条件的字段</li><li>用于 <code>GROUP BY</code> 和 <code>ORDER BY</code> 的字段</li><li>区分度大的字段</li></ul><p><strong>具体：</strong></p><p>索引最大的好处是提高查询速度，我经常针对下面场景来建立索引：</p><p>字段有唯一性限制的，比如商品编码；</p><p>经常用于 <code>WHERE</code> 查询条件的字段，这样能够提高整个表的查询速度，如果查询条件不是一个字段，可以建立联合索引。</p><p>经常用于 <code>GROUP BY</code> 和 <code>ORDER BY</code> 的字段，这样在查询的时候就不需要再去做一次排序了，因为我们都已经知道了建立索引之后在 B+Tree 中的记录都是排序好的。</p><div class="hint-container tip"><p class="hint-container-title">拓展</p><p>相关问题：</p><ol><li>有一个命令特别慢，如何排查？ 一般从：explian查看执行计划分析；慢日志查询分析 两个角度出发</li><li>如果字段区分度过小，那么MySQL可能会认为这个字段没有索引，直接走全表扫描。 解决方案：思路都是增加区分度，具体做法类似于身份证建立索引的方法：1.使用hash建立索引；2.先倒序再建立索引</li></ol></div><h2 id="mysql的索引结构-为什么使用b-树而不用b树" tabindex="-1"><a class="header-anchor" href="#mysql的索引结构-为什么使用b-树而不用b树"><span>MySQL的索引结构，为什么使用B+树而不用B树</span></a></h2><p><strong>回答要点：</strong></p><ul><li>B+ 树的非叶子节点不存放实际的记录数据，仅存放索引，因此B+ 树可以比B树更矮胖，磁盘I/O次数会更少</li><li>B+ 树有大量的冗余节点（所有非叶子节点都是冗余索引），冗余索引使B+树减少了树形的变化，更加高效</li><li>B+ 树叶子节点之间用链表连接了起来，有利于范围查询</li></ul><p><strong>具体：</strong> MySQL 默认的存储引擎 InnoDB 采用的是 B+ 作为索引的数据结构。</p><p>B+ 树的非叶子节点不存放实际的记录数据，仅存放索引，因此数据量相同的情况下，相比存储即存索引又存记录的 B 树，B+树的非叶子节点可以存放更多的索引，因此 B+ 树可以比 B 树更「矮胖」，查询底层节点的磁盘 I/O次数会更少。</p><p>B+ 树有大量的冗余节点（所有非叶子节点都是冗余索引），这些冗余索引让 B+ 树在插入、删除的效率都更高，比如删除根节点的时候，不会像 B 树那样会发生复杂的树的变化；</p><p>B+ 树叶子节点之间用链表连接了起来，有利于范围查询，而 B 树要实现范围查询，因此只能通过树的遍历来完成范围查询，这会涉及多个节点的磁盘 I/O 操作，范围查询效率不如 B+ 树。</p><div class="hint-container tip"><p class="hint-container-title">拓展</p><p>虽然B+树一般磁盘IO会更少，但是由于B树非叶子节点也会存放数据，如果查询的数据正好在B树的非叶子节点，那么此时B树会更快一些。</p></div><h2 id="mysql索引失效的几种情况" tabindex="-1"><a class="header-anchor" href="#mysql索引失效的几种情况"><span>MySQL索引失效的几种情况</span></a></h2><p><strong>回答要点：</strong></p><ul><li>左或者左右模糊匹配</li><li>索引列使用函数</li><li>索引包含表达式计算</li><li>隐式类型转换</li><li>联合索引不符合最左匹配原则</li></ul><p><strong>具体：</strong></p><p>使用左或者左右模糊匹配的时候，也就是 <code>like %xx</code> 或者 <code>like %xx%</code>这两种方式都会造成索引失效；</p><p>当我们在查询条件中对索引列使用函数，就会导致索引失效，比如：<code>month(t_modified)=7</code>。常用的还包括：字符串转数字和编码方式的转换</p><p>当我们在查询条件中对索引列进行表达式计算，也是无法走索引的。</p><p>MySQL 在遇到字符串和数字比较的时候，会自动把<strong>字符串转为数字</strong>，然后再进行比较。如果字符串是索引列，而条件语句中的输入参数是数字的话，那么索引列会发生隐式类型转换，由于隐式类型转换是通过 CAST 函数实现的，等同于对索引列使用了函数，所以就会导致索引失效。</p><p>联合索引要能正确使用需要遵循最左匹配原则，也就是按照最左优先的方式进行索引的匹配，否则就会导致索引失效。</p><div class="hint-container tip"><p class="hint-container-title">拓展</p><ul><li>[隐式类型转换]：MySQL究竟是字符串转数字还是数字转字符串：<img src="'+c+'" alt="alt text" loading="lazy"></li><li>[隐式类型转换]：一种很不常见的隐式类型转换：多表联查的时候如果字符集编码不同，那么可能导致字符集编码转换</li><li>常见误区：最左匹配原则与SQL语句中where后面字段的具体顺序无关，可见<a href="#%E5%A6%82%E6%9E%9C%E8%A6%81%E5%BB%BA%E7%AB%8B%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95%E5%AD%97%E6%AE%B5%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%9C%89%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E5%90%97">如果要建立联合索引，字段的顺序有什么需要注意吗</a></li><li>如果字段区分度太小，那么InnoDB默认会走全表，可以类似看成索引失效了。</li><li>可以联系<a href="#%E4%B8%80%E8%88%AC%E6%98%AF%E5%BB%BA%E7%AB%8B%E5%93%AA%E4%BA%9B%E5%AD%97%E6%AE%B5%E7%9A%84%E7%B4%A2%E5%BC%95%E5%91%A2">一般是建立哪些字段的索引呢</a>这一问题</li></ul></div>',47);function y(E,_){const i=n("RouteLink");return l(),a("div",null,[t("div",h,[m,t("ul",null,[B,t("li",null,[g,e(" 本站文章在创作过程中，部分内容整合了许多大佬的观点，在这里表示感谢，详见"),p(i,{to:"/more_about/context.html"},{default:s(()=>[e("版权说明")]),_:1}),e("，如有侵权或者不希望转载，请联系我添加出处或者删除相关内容。同时，如需转载本站文章，转载请在文首注明出处。")])])]),u])}const f=o(d,[["render",y],["__file","introduction.html.vue"]]),v=JSON.parse('{"path":"/notes/database/introduction.html","title":"数据库-MySQL","lang":"zh-CN","frontmatter":{"title":"数据库-MySQL","icon":"file","date":"2024-05-04T00:00:00.000Z","category":["八股"],"tag":["数据库","MySQL"],"description":"友情提示 内容建设： 内容正在不断的完善中，如果对内容有疑问或者希望添加内容，请留言，欢迎提出建议。 转载说明： 本站文章在创作过程中，部分内容整合了许多大佬的观点，在这里表示感谢，详见，如有侵权或者不希望转载，请联系我添加出处或者删除相关内容。同时，如需转载本站文章，转载请在文首注明出处。 如果要建立联合索引，字段的顺序有什么需要注意吗 回答要点： ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/notes/database/introduction.html"}],["meta",{"property":"og:site_name","content":"一山的学习笔记"}],["meta",{"property":"og:title","content":"数据库-MySQL"}],["meta",{"property":"og:description","content":"友情提示 内容建设： 内容正在不断的完善中，如果对内容有疑问或者希望添加内容，请留言，欢迎提出建议。 转载说明： 本站文章在创作过程中，部分内容整合了许多大佬的观点，在这里表示感谢，详见，如有侵权或者不希望转载，请联系我添加出处或者删除相关内容。同时，如需转载本站文章，转载请在文首注明出处。 如果要建立联合索引，字段的顺序有什么需要注意吗 回答要点： ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-06T09:42:26.000Z"}],["meta",{"property":"article:author","content":"一山"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:published_time","content":"2024-05-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-06T09:42:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据库-MySQL\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-06T09:42:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"一山\\",\\"url\\":\\"http://yishanicode.top\\"}]}"]]},"headers":[{"level":2,"title":"如果要建立联合索引，字段的顺序有什么需要注意吗","slug":"如果要建立联合索引-字段的顺序有什么需要注意吗","link":"#如果要建立联合索引-字段的顺序有什么需要注意吗","children":[]},{"level":2,"title":"怎么确定语句是否走了索引？","slug":"怎么确定语句是否走了索引","link":"#怎么确定语句是否走了索引","children":[]},{"level":2,"title":"一般是建立哪些字段的索引呢","slug":"一般是建立哪些字段的索引呢","link":"#一般是建立哪些字段的索引呢","children":[]},{"level":2,"title":"MySQL的索引结构，为什么使用B+树而不用B树","slug":"mysql的索引结构-为什么使用b-树而不用b树","link":"#mysql的索引结构-为什么使用b-树而不用b树","children":[]},{"level":2,"title":"MySQL索引失效的几种情况","slug":"mysql索引失效的几种情况","link":"#mysql索引失效的几种情况","children":[]}],"git":{"createdTime":1714557672000,"updatedTime":1714988546000,"contributors":[{"name":"奔狼\\\\Administrator","email":"123@","commits":4}]},"readingTime":{"minutes":6.83,"words":2048},"filePathRelative":"notes/database/introduction.md","localizedDate":"2024年5月4日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">友情提示</p>\\n<ul>\\n<li><strong>内容建设：</strong> 内容正在不断的完善中，如果对内容有疑问或者希望添加内容，请留言，欢迎提出建议。</li>\\n<li><strong>转载说明：</strong> 本站文章在创作过程中，部分内容整合了许多大佬的观点，在这里表示感谢，详见<a href=\\"/more_about/context.html\\" target=\\"_blank\\">版权说明</a>，如有侵权或者不希望转载，请联系我添加出处或者删除相关内容。同时，如需转载本站文章，转载请在文首注明出处。</li>\\n</ul>\\n</div>","autoDesc":true}');export{f as comp,v as data};
